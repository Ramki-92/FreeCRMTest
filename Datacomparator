import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvException;

import java.io.*;
import java.sql.*;
import java.util.*;

public class DataComparator {

    public static void main(String[] args) {
        String[] csvFiles = {"file1.csv", "file2.csv", "file3.csv", "file4.csv"};
        String tableName = "oracle_table";
        String jdbcUrl = "jdbc:oracle:thin:@your_oracle_db_url";
        String username = "your_db_username";
        String password = "your_db_password";
        String metaColumn = "META_COLUMN";

        List<Map<String, String>> csvData = new ArrayList<>();
        for (String csvFile : csvFiles) {
            csvData.addAll(readCsv(csvFile));
        }

        List<Map<String, String>> tableData = fetchTableData(jdbcUrl, username, password, tableName, metaColumn);

        compareData(csvData, tableData, "mismatch_report.txt");
    }

    public static List<Map<String, String>> readCsv(String csvFile) {
        List<Map<String, String>> data = new ArrayList<>();
        try (CSVReader reader = new CSVReader(new FileReader(csvFile))) {
            List<String[]> allRows = reader.readAll();
            String[] header = allRows.get(0);
            for (int i = 1; i < allRows.size(); i++) {
                String[] row = allRows.get(i);
                Map<String, String> rowData = new HashMap<>();
                for (int j = 0; j < header.length; j++) {
                    rowData.put(header[j], row[j]);
                }
                data.add(rowData);
            }
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
        return data;
    }

    public static List<Map<String, String>> fetchTableData(String jdbcUrl, String username, String password, String tableName, String metaColumn) {
        List<Map<String, String>> data = new ArrayList<>();
        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery("SELECT * FROM " + tableName)) {

            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            while (resultSet.next()) {
                Map<String, String> rowData = new HashMap<>();
                for (int i = 1; i <= columnCount; i++) {
                    String columnName = metaData.getColumnName(i);
                    String value = resultSet.getString(i);
                    rowData.put(columnName, value);
                }
                data.add(rowData);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return data;
    }

    public static void compareData(List<Map<String, String>> csvData, List<Map<String, String>> tableData, String outputFileName) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFileName))) {
            writer.write("CSV Data -> Table Data\n");

            for (int i = 0; i < csvData.size(); i++) {
                Map<String, String> csvRow = csvData.get(i);
                Map<String, String> tableRow = tableData.get(i);
                for (String key : csvRow.keySet()) {
                    String csvValue = csvRow.get(key);
                    String tableValue = tableRow.get(key);

                    if (csvValue == null && tableValue == null) continue;
                    if (csvValue == null || tableValue == null || !csvValue.equals(tableValue)) {
                        writer.write(String.format("Mismatch found in row %d for column '%s': CSV value = '%s', Table value = '%s'%n", i + 1, key, csvValue, tableValue));
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
